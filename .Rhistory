install.packages("KoNLP")
install.packages("KoNLP")
# 연설문의 단어에 대한 워드 클라우드 만들기
install.packages("KoNLP")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("wordcloud")
library(KoNLP)
library(RColorBrewer)
library(wordcloud)
install.packages("C:/YKS/R/package/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source")
install.packages("C:/YKS/R/package/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source")
install.packages("C:/YKS/R/package/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source")
install.packages('rJava')
install.packages('stringr')
install.packages('hash')
install.packages('Sejong')
install.packages('RSQLite')
install.packages('devtools')
install.packages('tau')
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.80.2.tar.gz", repos = NULL, type="source")
useSejongDic()
useSejongDic()
library(KoNLP)
library(Sejong)
detach("package:KoNLP", unload = TRUE)
library(KoNLP)
detach("package:KoNLP", unload = TRUE)
library(KoNLP)
useSejongDic()
useSejongDic()
pal2 <- brewer.pal(8, "Dark2")
test <- readLines(file.choose())
test
text <- readLines(file.choose())
text
noun <- sapply(text, extractNoun, USE.NAMES=F)
noun
pal2 <- brewer.pal(8, "Dark2")
text <- readLines(file.choose())
text
noun <- sapply(text, extractNoun, USE.NAMES=F)
noun
text
noun <- sapply(text, extractNoun, USE.NAMES=F)
noun
noun <- sapply(text, extractNoun, USE.NAMES = F)
noun
useSejongDic()
pal2 <- brewer.pal(8, "Dark2")
text <- readLines(file.choose())
text
noun <- sapply(text, extractNoun, USE.NAMES = F)
noun
noun <- sapply(text, extractNoun, USE.NAMES = F)
noun
noun <- sapply(text, extractNoun, USE.NAMES = F)
library(KoNLP)
library(Sejong)
useSejongDic()
pal2 <- brewer.pal(8, "Dark2")
library(RColorBrewer)
text <- readLines(file.choose())
pal2 <- brewer.pal(8, "Dark2")
text <- readLines(file.choose())
text
noun <- sapply(text, extractNoun, USE.NAMES = F)
noun
noun2 <- unlist(noun)
noun2
# p.221
word_count <- table(noun2)
word_count
head(sort(word_count, decreasing = TRUE), 10)
library(wordcloud)
wordcloud(names(word_count),
freq = word_count,
scale = c(6,0.3),
min.freq = 3,
random.order = F,
rot.per = .1,
colors = pal2)
english <- c(90, 80, 60, 70)  # 영어 점수 변수 생성
english
math <- c(50, 60, 100, 20)    # 수학 점수 변수 생성
math
# english, math로 데이터 프레임 생성해서 df_midterm에 할당
df_midterm <- data.frame(english, math)
df_midterm
class <- c(1, 1, 2, 2)
class
df_midterm <- data.frame(english, math, class)
df_midterm
mean(df_midterm$english)  # df_midterm의 english로 평균 산출
mean(df_midterm$math)     # df_midterm의 math로 평균 산술
# 데이터프레임 한번에 만들기
df_midterm <- data.frame(english = c(90, 80, 60, 70),
math = c(50, 60, 100, 20),
class = c(1, 1, 2, 2))
df_midterm
sales <- data.frame(fruit = c("사과", "딸기", "수박"),
price = c(1800, 1500, 3000),
volume = c(24, 38, 13))
sales
# exam 데이터 파악하기
exam <- read.csv(file.choose())
head(exam)
head(exam,10)
tail(exam)
View(exam)
dim(exam)
str(exam)
summary(exam)
mpg <- as.data.frame(ggplot2::mpg)    # 데이터프레임 형태로 바꿔주는 함수
head(mpg)
tail(mpg)
View(mpg)
dim(mpg)
str(mpg)
summary(mpg)
install.packages("dplyr") # dplyr 설치
library(dplyr) # dplyr 로드
df_raw <- data.frame(var1 = c(1, 2, 1),
var2 = c(2, 3, 2))
df_raw
### 1. 데이터 프레임 복사본 만들기
df_new <- df_raw # 복사본 생성
df_new # 출력
### 2. 변수명 바꾸기
df_new <- rename(df_new, v2 = var2) # var2 를 v2 로 수정
df_new
### 3. 수정 전후 비교
df_raw
df_new
